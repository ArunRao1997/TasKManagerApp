{"version":3,"sources":["api/api.js","components/TaskList.js","App.js","reportWebVitals.js","index.js"],"names":["API_BASE_URL","TaskList","tasks","setTasks","useState","editingIndex","setEditingIndex","newTask","setNewTask","taskName","taskDescription","isAdding","setIsAdding","useEffect","fetchTasks","async","response","axios","get","data","error","console","handleSave","id","index","task","put","updateTask","handleCancel","handleDelete","delete","handleChange","e","target","name","value","_jsx","className","children","_jsxs","map","type","onChange","_Fragment","FaSave","onClick","FaTimes","FaEdit","handleEdit","FaTrash","placeholder","post","colSpan","FaPlus","App","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"sPAEA,MAAMA,EAAe,mC,WCsKNC,MAnKEA,KACb,MAAOC,EAAOC,GAAYC,mBAAS,KAC5BC,EAAcC,GAAmBF,mBAAS,OAC1CG,EAASC,GAAcJ,mBAAS,CAAEK,SAAU,GAAIC,gBAAiB,MACjEC,EAAUC,GAAeR,oBAAS,GAEzCS,qBAAU,KACNC,GAAY,GACb,IAEH,MAAMA,EAAaC,UACf,IACI,MAAMC,QDbYC,IAAMC,IAAIlB,GCc5BG,EAASa,EAASG,KACtB,CAAE,MAAOC,GACLC,QAAQD,MAAM,wBAAyBA,EAC3C,GAqBEE,EAAaP,UACf,UDrCmBQ,ECsCErB,EAAMsB,GAAOD,GDtCXE,ECsCelB,EDtCNU,IAAMS,IAAI,GAAG1B,IAAeuB,KAAOE,ICuC/DX,IACAR,EAAgB,KACpB,CAAE,MAAOc,GACLC,QAAQD,MAAM,uBAAwBA,EAC1C,CD3CkBO,IAACJ,EAAIE,CC2CvB,EAGEG,EAAeA,KACjBtB,EAAgB,MAChBE,EAAW,CAAEC,SAAU,GAAIC,gBAAiB,KAC5CE,GAAY,EAAM,EAGhBiB,EAAed,UACjB,UDpDmBQ,ECqDErB,EAAMsB,GAAOD,GDrDRN,IAAMa,OAAO,GAAG9B,IAAeuB,OCsDrDT,IACIT,IAAiBmB,GACjBlB,EAAgB,KAExB,CAAE,MAAOc,GACLC,QAAQD,MAAM,uBAAwBA,EAC1C,CD5DmBG,KC4DnB,EAGEQ,EAAgBC,IAClBxB,EAAW,IACJD,EACH,CAACyB,EAAEC,OAAOC,MAAOF,EAAEC,OAAOE,OAC5B,EAGN,OACIC,cAAA,OAAKC,UAAU,sBAAqBC,SAChCC,eAAA,SAAOF,UAAU,aAAYC,SAAA,CACzBF,cAAA,SAAAE,SACIC,eAAA,MAAAD,SAAA,CACIF,cAAA,MAAAE,SAAI,cACJF,cAAA,MAAAE,SAAI,qBACJF,cAAA,MAAAE,SAAI,iBAGZC,eAAA,SAAAD,SAAA,CACKpC,EAAMsC,KAAI,CAACf,EAAMD,IACde,eAAA,MAAAD,SAAA,CACIF,cAAA,MAAAE,SACKjC,IAAiBmB,EACdY,cAAA,SACIK,KAAK,OACLP,KAAK,WACLC,MAAO5B,EAAQE,SACfiC,SAAUX,IAGdN,EAAKhB,WAGb2B,cAAA,MAAAE,SACKjC,IAAiBmB,EACdY,cAAA,SACIK,KAAK,OACLP,KAAK,kBACLC,MAAO5B,EAAQG,gBACfgC,SAAUX,IAGdN,EAAKf,kBAGb0B,cAAA,MAAAE,SACKjC,IAAiBmB,EACde,eAAAI,WAAA,CAAAL,SAAA,CACIF,cAACQ,IAAM,CAACC,QAASA,IAAMvB,EAAWE,KAClCY,cAACU,IAAO,CAACD,QAASjB,OAGtBW,eAAAI,WAAA,CAAAL,SAAA,CACIF,cAACW,IAAM,CAACF,QAASA,IArFjCrB,KAChBlB,EAAgBkB,GAChBhB,EAAWN,EAAMsB,GAAO,EAmF+BwB,CAAWxB,KAClCY,cAACa,IAAO,CAACJ,QAASA,IAAMhB,EAAaL,YAlC5CC,EAAKF,MAwCjBZ,GACG4B,eAAA,MAAAD,SAAA,CACIF,cAAA,MAAAE,SACIF,cAAA,SACIK,KAAK,OACLP,KAAK,WACLC,MAAO5B,EAAQE,SACfyC,YAAY,YACZR,SAAUX,MAGlBK,cAAA,MAAAE,SACIF,cAAA,SACIK,KAAK,OACLP,KAAK,kBACLC,MAAO5B,EAAQG,gBACfwC,YAAY,mBACZR,SAAUX,MAGlBQ,eAAA,MAAAD,SAAA,CACIF,cAACQ,IAAM,CAACC,QA9HlB9B,UACd,GAAIR,EAAQE,UAAYF,EAAQG,gBAC5B,UDrBee,ECsBMlB,EDtBGU,IAAMkC,KAAKnD,EAAcyB,ICuB7CX,IACAN,EAAW,CAAEC,SAAU,GAAIC,gBAAiB,KAC5CE,GAAY,EAChB,CAAE,MAAOQ,GACLC,QAAQD,MAAM,qBAAsBA,EACxC,CD5BeK,KC6BnB,IAqHwBW,cAACU,IAAO,CAACD,QAASjB,WAI5BjB,GACEyB,cAAA,MAAAE,SACIF,cAAA,MAAIgB,QAAQ,IAAIf,UAAU,UAASC,SAC/BF,cAACiB,IAAM,CAACR,QAASA,IAAMjC,GAAY,gBAMrD,ECtJC0C,MAVHA,IAEJlB,cAAA,OAAKC,UAAU,MAAKC,SAChBF,cAAA,OAAKC,UAAU,iBAAgBC,SAC3BF,cAACnC,EAAQ,QCIVsD,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECHWS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHjC,cAACkC,IAAMC,WAAU,CAAAjC,SACfF,cAACkB,EAAG,OAORC,G","file":"static/js/main.bc2e0511.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://127.0.0.1:8000/api/tasks/';\n\nexport const getTasks = () => axios.get(API_BASE_URL);\nexport const createTask = (task) => axios.post(API_BASE_URL, task);\nexport const updateTask = (id, task) => axios.put(`${API_BASE_URL}${id}/`, task);\nexport const deleteTask = (id) => axios.delete(`${API_BASE_URL}${id}/`);","import React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport { FaEdit, FaTrash, FaSave, FaTimes, FaPlus } from 'react-icons/fa';\nimport { getTasks, createTask, updateTask, deleteTask } from '../api/api';\n\nconst TaskList = () => {\n    const [tasks, setTasks] = useState([]);\n    const [editingIndex, setEditingIndex] = useState(null);\n    const [newTask, setNewTask] = useState({ taskName: '', taskDescription: '' });\n    const [isAdding, setIsAdding] = useState(false);\n\n    useEffect(() => {\n        fetchTasks();\n    }, []);\n\n    const fetchTasks = async () => {\n        try {\n            const response = await getTasks();\n            setTasks(response.data);\n        } catch (error) {\n            console.error(\"Error fetching tasks:\", error);\n        }\n    };\n\n    const handleAdd = async () => {\n        if (newTask.taskName && newTask.taskDescription) {\n            try {\n                await createTask(newTask);\n                fetchTasks(); // Refresh the task list\n                setNewTask({ taskName: '', taskDescription: '' });\n                setIsAdding(false);\n            } catch (error) {\n                console.error(\"Error adding task:\", error);\n            }\n        }\n    };\n\n    const handleEdit = (index) => {\n        setEditingIndex(index);\n        setNewTask(tasks[index]);\n    };\n\n    const handleSave = async (index) => {\n        try {\n            await updateTask(tasks[index].id, newTask);\n            fetchTasks();\n            setEditingIndex(null);\n        } catch (error) {\n            console.error(\"Error updating task:\", error);\n        }\n    };\n\n    const handleCancel = () => {\n        setEditingIndex(null);\n        setNewTask({ taskName: '', taskDescription: '' });\n        setIsAdding(false);\n    };\n\n    const handleDelete = async (index) => {\n        try {\n            await deleteTask(tasks[index].id);\n            fetchTasks();\n            if (editingIndex === index) {\n                setEditingIndex(null);\n            }\n        } catch (error) {\n            console.error(\"Error deleting task:\", error);\n        }\n    };\n\n    const handleChange = (e) => {\n        setNewTask({\n            ...newTask,\n            [e.target.name]: e.target.value,\n        });\n    };\n\n    return (\n        <div className=\"task-list-container\">\n            <table className=\"task-table\">\n                <thead>\n                    <tr>\n                        <th>Task Name</th>\n                        <th>Task Description</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {tasks.map((task, index) => (\n                        <tr key={task.id}>\n                            <td>\n                                {editingIndex === index ? (\n                                    <input\n                                        type=\"text\"\n                                        name=\"taskName\"\n                                        value={newTask.taskName}\n                                        onChange={handleChange}\n                                    />\n                                ) : (\n                                    task.taskName\n                                )}\n                            </td>\n                            <td>\n                                {editingIndex === index ? (\n                                    <input\n                                        type=\"text\"\n                                        name=\"taskDescription\"\n                                        value={newTask.taskDescription}\n                                        onChange={handleChange}\n                                    />\n                                ) : (\n                                    task.taskDescription\n                                )}\n                            </td>\n                            <td>\n                                {editingIndex === index ? (\n                                    <>\n                                        <FaSave onClick={() => handleSave(index)} />\n                                        <FaTimes onClick={handleCancel} />\n                                    </>\n                                ) : (\n                                    <>\n                                        <FaEdit onClick={() => handleEdit(index)} />\n                                        <FaTrash onClick={() => handleDelete(index)} />\n                                    </>\n                                )}\n                            </td>\n                        </tr>\n                    ))}\n                    {isAdding && (\n                        <tr>\n                            <td>\n                                <input\n                                    type=\"text\"\n                                    name=\"taskName\"\n                                    value={newTask.taskName}\n                                    placeholder=\"Task Name\"\n                                    onChange={handleChange}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    type=\"text\"\n                                    name=\"taskDescription\"\n                                    value={newTask.taskDescription}\n                                    placeholder=\"Task Description\"\n                                    onChange={handleChange}\n                                />\n                            </td>\n                            <td>\n                                <FaSave onClick={handleAdd} />\n                                <FaTimes onClick={handleCancel} />\n                            </td>\n                        </tr>\n                    )}\n                    {!isAdding && (\n                        <tr>\n                            <td colSpan=\"3\" className=\"add-row\">\n                                <FaPlus onClick={() => setIsAdding(true)} />\n                            </td>\n                        </tr>\n                    )}\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default TaskList;","import React from 'react';\nimport TaskList from './components/TaskList';\nimport './App.css';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <div className=\"task-container\">\n                <TaskList />\n            </div>\n        </div>\n    );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}